// Script: Generate a Web3 (Avalanche) case using the built-in AI engine
// Requirement: Do NOT generate content locally; strictly call the AI via generateMysteryCase

import 'dotenv/config';
import { writeFile } from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { generateMysteryCaseWithRaw } from './mysteryGenerator.ts';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function main() {
  const themeEnv = (process.env.THEME || process.argv[3] || 'defi_heist') as 'defi_heist' | 'validator_conspiracy' | 'nft_forgery' | 'bridge_exploit' | 'governance_manipulation';
  const outFile = process.env.OUT || process.argv[4] || 'web3-case.json';
  const outPath = path.resolve(__dirname, outFile);

  // Allow difficulty override via env or process args; map 'high' to 'advanced'
  const argDifficulty = (process.env.DIFFICULTY || process.argv[2] || 'beginner').toLowerCase();
  const difficulty = (argDifficulty === 'high' ? 'advanced' : argDifficulty) as 'beginner' | 'intermediate' | 'advanced';

  try {

  // Use the AI engine to generate a Web3 themed case on Avalanche
  const { case: caseData, raw, promptUsed } = await generateMysteryCaseWithRaw(themeEnv, difficulty);

    const output = {
      generatedAt: new Date().toISOString(),
      engine: 'Gemini (via src/functions/generate.ts)',
  theme: themeEnv,
  difficulty,
  case: caseData,
  raw,
  promptUsed,
    };

    await writeFile(outPath, JSON.stringify(output, null, 2), 'utf-8');
    console.log(`✅ Web3 case generated by AI and saved to ${outPath}`);
  } catch (err: any) {
    // If AI fails, write the error info to JSON as requested
    const errorOutput = {
      generatedAt: new Date().toISOString(),
      engine: 'Gemini (via src/functions/generate.ts)',
  theme: themeEnv,
  difficulty,
      error: true,
      message: err?.message || 'Unknown error during AI generation',
      status: err?.status,
      statusText: err?.statusText,
      details: err?.errorDetails,
      stack: err?.stack,
    };

    await writeFile(outPath, JSON.stringify(errorOutput, null, 2), 'utf-8');
    console.error('❌ AI generation failed. Error written to', outPath);
    process.exitCode = 1;
  }
}

main();
